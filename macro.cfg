[gcode_macro START_PRINT]
#   Use START_PRINT for the slicer starting script - please customize for your slicer of choice
gcode:
    ABS_END_CANCEL
    CENTER
    M117 Heating bed
    SET_FAN_SPEED FAN=Nevermore SPEED=0.75
    MCU_RUNNING
    M190 S{ params.BED }       ; wait for bed to get to target temperature
    LOGO_PENDING
    ; Preheat the nozzle
    {% if printer.extruder.temperature < 180 %}
        M117 Preheating nozzle
        M109 S180                  ; wait for nozzle to heat to 180C - soften filament, but no oozing
    {% endif %}

    ; Print fan off
    M107

    ; Home
    G21                            ; use mmm
    G90                            ; use absolute coordinates
    M83                            ; extruder relative mode
    M117 Homing
    G28                            ; home all axes
    G1 Z40 F750                    ; move nozzle away from bed to make it easier to brush if needed

    ; Heat the nozzle
    M117 Heating nozzle
    M109 S{ params.EXTRUDER }      ; wait for nozzle to get to target temperature

    ; Home Z with hot nozzle
    G28 Z
    # BED_MESH_PROFILE LOAD=default
    LOGO_READY

    ; Prime nozzle
    VORON_PURGE
    # NOZZLE_PURGE
    # M117 Priming nozzle
    # G1 Y5 X5 F6000
    # G1 Z0.3
    # G92 E0.0
    # G1 X80 E12.0 F1000
    # G1 Y7 F1000
    # G1 X40 E6.0 F1000
    # G1 E-0.5 F3000                 ; retract to avoid stringing
    # G1 X40.5 E0 F1000              ; wipe back to break string
    # G1 X35 E0 F1000                ; wipe forward to break string
    # G92 E0.0

    ; Done, continue with print
    M117 Printing
    # G28                            ; home all axes
    # G90                            ; absolute positioning    
    # G1 Z20 F3000                   ; move nozzle away from bed

[gcode_macro END_PRINT]
gcode:
    {% if params.ROLL == 'ABS' %}
      ABS_END
      M118 ABS COOL
    {% else %}
      PLA_END
      M118 PLA COOL
    {% endif %}
    
[gcode_macro PLA_END]
#   Use END_PRINT for the slicer ending script - please customize for your slicer of choice
gcode:
# hier een if routine zetten met uservariable?
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y} F3600          ; park nozzle at rear
    LOGO_COOLED
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=300
    # SET_FAN_SPEED FAN=pcb_fan SPEED=0.5
    MCU_STANDBY
    M118 Ended print  
    
[delayed_gcode END_PRINT_COOL]
gcode:
    TURN_OFF_HEATERS
    LOGO_COOLED
    # SET_FAN_SPEED FAN=pcb_fan SPEED=0.5
    MCU_STANDBY
    M118 Ended print

[gcode_macro ABS_END_CANCEL]
gcode:
    UPDATE_DELAYED_GCODE ID=gradual_cooldown DURATION=0
    UPDATE_DELAYED_GCODE ID=END_PRINT_COOL DURATION=0
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=0
    # TURN_OFF_HEATERS
    # SET_HEATER_TEMPERATURE HEATER=BED TARGET=0

[gcode_macro ABS_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning
	#G1 Z275 F1000 ; lower platform to bottom
	# G28; X60 Y60; home X-axis Y-Axis
	# M104 S0 ; Turn off Extruder
	# M106 S0 ; Turn off Fan
	# M84 ; disable motors
    END_PRINT_ABS
    {% set delay_end = (((printer.heater_bed.temperature|int - 40)/5)*300)|int %}
    {% if delay_end > 0 %}
      UPDATE_DELAYED_GCODE ID=END_PRINT_COOL DURATION={delay_end}
      SET_FAN_SPEED FAN=Nevermore SPEED=0.5
      UPDATE_DELAYED_GCODE ID=filter_off DURATION={delay_end}
      SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ printer.heater_bed.target }
      M118 delay END_PRINT for ({delay_end}ms)
    {% else %}
      
    {% endif %}
    # M109 S{ params.EXTRUDER }      ; wait for nozzle to get to target temperature
    {% if printer.heater_bed.temperature|int > 50 %}
        M118 Start gradual bed cooling ({printer.heater_bed.temperature|int}°C).
        M118 reduce temp to ({printer.heater_bed.temperature|int - 5 }°C).
        UPDATE_DELAYED_GCODE ID=gradual_cooldown DURATION=300
        
    {% else %}
        M118 No Gradual bed cooling necessary ({printer.heater_bed.temperature|int}°C).
    	M140 S0 ; turn off bed
    	# M81 ; disable Power
        M118 Print Complete!
        LOGO_COOLED
        MCU_STANDBY
    {% endif %}

[delayed_gcode gradual_cooldown]
gcode:
    {% if printer.heater_bed.target > 40 %}
        M118 reduce temp to ({printer.heater_bed.target - 5 }°C).
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ printer.heater_bed.target - 5 }
        # M140 S{ printer.heater_bed.target - 5 }
        UPDATE_DELAYED_GCODE ID=gradual_cooldown DURATION=300
    {% else %}
        M118 Gradual bed cooling finished ({printer.heater_bed.temperature|int}°C).
    	M140 S0 ; turn off bed
    	# M81 ; disable Power
        M118 Print Complete!
        MCU_STANDBY
        LOGO_COOLED
    {% endif %}

[gcode_macro END_PRINT_ABS]
#   Use END_PRINT_ABS for the slicer ending script - please customize for your slicer of choice
gcode:
    # M400                           ; wait for buffer to clear
    # G92 E0                         ; zero the extruder
    # G1 E-4.0 F3600                 ; retract filament
    # G91                            ; relative positioning

    # set already retacted extruder
    {% set retracted = 1|float %}

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    # TURN_OFF_HEATERS
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y} F3600          ; park nozzle at rear
    LOGO_PENDING


[gcode_macro NOZZLE_PURGE]
description: Draw a purge line at the front left edge of the build plate
gcode:
  # CHOME
  # G0 X0.5 Y0.5 F3000 ; Go to front
  G0 X109.5 Y0.5 F3000 ; Go to front
  G0 Z0.15 ; Drop to bed
  M83 ; Set extruder to relative mode
  G1 X64 E15 F500 ; Extrude 25mm of filament in a 4cm line
  G1 E-0.5 F400 ; Retract a little
  G1 X24 F4000 ; Quickly wipe away from the filament line
  G1 Z0.3 ; Raise and begin printing.

[gcode_macro PURGE_LINE_2]
gcode:
    {% set hotendtemp = params.HOTEND|int %}

    G90                            ; absolute positioning

    G1 X2 Y0.5 Z0.4 F8000          ; move to purge start
    M109 S{hotendtemp}             ; set and wait for hotend temp

    G91                            ; relative positioning
    G1 X100 E22 F1200              ; first line
    G1 Y0.5                        ; move slightly
    G1 X-91 E20 F1200              ; second line
    G92 E0                         ; zero the extruder
    G90                            ; absolute positioning

[gcode_macro MCU_RUNNING]
gcode:
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=PI TARGET=40
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=MCU TARGET=25


[gcode_macro MCU_STANDBY]
gcode:
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=PI TARGET=55
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=MCU TARGET=35



######################################################################
## Filament Change                                                  ##
######################################################################
# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 130mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "SWAP_RESUME" gcode.
[gcode_macro M600]
########### Gcode ############
gcode:
  # {% set X = params.X|default(printer.configfile.config["stepper_x"]["position_endstop"]|string)|int %}
  # {% set Y = params.Y|default(printer.configfile.config["stepper_y"]["position_endstop"]|string)|int %}
  {% set X = params.X|default(115)|float %}
  {% set Y = params.Y|default(0)|float %}
  {% set Z = params.Z|default(10)|int %}
  {% set E = params.E|default(-20)|int %}
  {% set tool = params.tool|default(0)|int %}

        SAVE_GCODE_STATE NAME=M600_state
        PAUSE
        G91
        G1 E-5 F4000
        G1 Z{Z}
        G90
        G1 X{X} Y{Y} F3000        ;park position
        G0 E10 F500                ;extrude filament to get better blob on end
        G0 E{E} F600             ;retract additional filament to move out of melt zone
        G92 E0
        # SET_FILAMENT_SENSOR SENSOR=e{TOOL}_runout ENABLE=0

#    Use this command resume during a mid print filament swap (DONT USE OCTO/MAINSAIL/DWC RESUME)
[gcode_macro SWAP_RESUME] 
gcode:
    RESTORE_GCODE_STATE NAME=M600_state
    # SET_FILAMENT_SENSOR SENSOR=e0_runout ENABLE=1
    # SET_FILAMENT_SENSOR SENSOR=e1_runout ENABLE=1
    resume

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro TestMove_slow]
gcode:
  G28 X Y Z
  {% for flashes in range(5|int) %}
    G1 X2 F2500
    G1 Y2 F2500
    G1 X118 F2500
    G1 Y118 F2500
    G1 X2 Y2 F2500
    G1 X118 Y2 F2500
    G1 X2 Y118 F2500
  {% endfor %}
  CENTER

[gcode_macro TestMove]
gcode:
  G28 X Y Z
  {% for flashes in range(5|int) %}
    G1 X2 F45000
    G1 Y2 F45000
    G1 X118 F45000
    G1 Y118 F45000
    G1 X2 Y2 F45000
    G1 X118 Y2 F45000
    G1 X2 Y118 F45000
  {% endfor %}
  CENTER